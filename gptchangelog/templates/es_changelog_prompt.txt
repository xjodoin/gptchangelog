Generaci√≥n de Registro de Cambios para Proyecto de Software (Versi√≥n: $next_version)

Fecha: $current_date
Proyecto: $project_name

Mensajes de Commit:
```
$commit_messages
```

Objetivo:
Crear un registro de cambios estructurado, claro y completo en formato markdown, que refleje los cambios realizados en la √∫ltima versi√≥n del software.

Instrucciones:

1. Formato del Encabezado del Registro de Cambios:
   - Usar la sintaxis ## de markdown para formatear el encabezado de versi√≥n.
   - Seguir el patr√≥n: ## [$next_version] - $current_date

2. Procesar Mensajes de Commit:
   - Analizar cada commit para determinar su tipo (funci√≥n, correcci√≥n, mejora, etc.)
   - Buscar prefijos de commit convencionales como "feat:", "fix:", "chore:", etc.
   - Si un commit no tiene prefijo, analizar su contenido para determinar la categor√≠a m√°s apropiada
   - Agrupar commits relacionados bajo el mismo punto

3. Categorizar Cambios:
   - Usar estas categor√≠as principales:
     - ‚ú® **Caracter√≠sticas**: Nuevas funcionalidades o mejoras significativas
     - üêõ **Correcciones de Errores**: Correcciones a funcionalidades existentes
     - üîÑ **Cambios**: Actualizaciones o modificaciones a caracter√≠sticas existentes
     - üóëÔ∏è **Eliminado**: Caracter√≠sticas o funcionalidades que han sido eliminadas
     - ‚ö†Ô∏è **Obsoleto**: Caracter√≠sticas que ser√°n eliminadas en futuras versiones
     - üìö **Documentaci√≥n**: Actualizaciones o mejoras en la documentaci√≥n
     - üîß **Mantenimiento**: Refactorizaci√≥n de c√≥digo, actualizaciones de dependencias, etc.
   - Solo incluir categor√≠as que tengan commits relevantes

4. Formatear Cada Cambio:
   - Comenzar con un resumen claro y conciso del cambio
   - Incluir contexto relevante e impacto cuando sea apropiado
   - Formatear en puntos consistentes
   - Mencionar n√∫meros de problemas/PR si aparecen en los mensajes de commit

5. Estilo de Escritura:
   - Usar tiempo presente (ej., "A√±ade funci√≥n" no "A√±adi√≥ funci√≥n")
   - Ser espec√≠fico sobre qu√© cambi√≥ y por qu√© es importante
   - Mantener las entradas concisas pero informativas
   - Asegurar un formato consistente en todas las entradas

6. Organizaci√≥n:
   - Listar los cambios m√°s significativos primero dentro de cada categor√≠a
   - Agrupar cambios relacionados
   - Asegurar un flujo l√≥gico en la presentaci√≥n de los cambios

Directrices Adicionales:
- Asegurar que el registro de cambios sea accesible tanto para lectores t√©cnicos como no t√©cnicos
- Destacar prominentemente los cambios disruptivos
- Evitar jerga t√©cnica a menos que sea necesario
- No incluir hashes de commit o commits triviales (ej., correcciones de tipograf√≠a) a menos que aborden problemas significativos

Formato de Salida:
```markdown
## [$next_version] - $current_date

### ‚ú® Caracter√≠sticas
- Implementaci√≥n de nueva caracter√≠stica X que permite la capacidad Y
- A√±adido soporte para integraci√≥n con Z

### üêõ Correcciones de Errores
- Solucionado problema con la funcionalidad de inicio de sesi√≥n que imped√≠a a los usuarios acceder a sus cuentas
- Resuelto cuello de botella de rendimiento en el pipeline de procesamiento de datos

### üîÑ Cambios
- Actualizados componentes de UI para mejor capacidad de respuesta
- Modificada estructura de endpoints de API para mejor consistencia

### üîß Mantenimiento
- Actualizadas dependencias a las √∫ltimas versiones
- Refactorizado estructura de c√≥digo para mejor mantenibilidad

### üìö Documentaci√≥n
- A√±adida gu√≠a completa para nuevas caracter√≠sticas
- Actualizadas instrucciones de instalaci√≥n
```

No incluyas ning√∫n texto explicativo o comentarios en tu salida - proporciona solamente el registro de cambios formateado.