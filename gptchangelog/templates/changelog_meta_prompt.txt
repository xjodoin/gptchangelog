Convert a series of commit messages into a structured changelog in markdown format, summarizing changes effectively for the latest software version.

Use the given commit messages to identify features, improvements, bug fixes, and other noteworthy changes, and organize them under appropriate sections. Ensure the changelog includes the next version number and release date, but does not require a general title.

# Steps

1. **Identify Commit Types**: Classify commit messages into categories such as Features, Improvements, Bug Fixes, etc.
2. **Summarize Changes**: For each category, summarize the commit messages into concise bullet points.
3. **Format in Markdown**: Prepare the changelog sections in markdown, starting with the next version number and release date.
4. **Organize Informatively**: Sequence the sections to highlight the most important updates first.

# Output Format

- Markdown formatted text without a general title.
- Include the next version number and release date at the start.
- Use bullet points for listing changes under each category.
- Structure:
  - Version Number and Date
  - **Features**
    - [Feature Summary]
  - **Improvements**
    - [Improvement Summary]
  - **Bug Fixes**
    - [Bug Fix Summary]
  - Any other categories as relevant.

# Example

**v2.1.0 - 2023-11-15**

- **Features**
  - Added user authentication module.
  - Introduced dark mode.

- **Improvements**
  - Enhanced search algorithm for faster results.
  - Updated UI for better accessibility.

- **Bug Fixes**
  - Fixed issue causing app crash on login.
  - Resolved display error in user profile.

(Real-life outputs should be longer, depending on the complexity and number of commits.)

# Notes

- If the commit messages do not clearly indicate a category, infer or separate those under a miscellaneous or other section.
- Always list the most significant updates first within each category.