{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GPTChangelog","text":"![GPTChangelog Logo](assets/images/logo.png){ width=\"300\" }  <p>Automatically generate detailed, well-structured changelogs from your git commit history using OpenAI's GPT models.</p>"},{"location":"#overview","title":"Overview","text":"<p>GPTChangelog is a powerful command-line tool that leverages OpenAI's GPT models to automatically generate high-quality changelogs from your git commit history. It analyzes your commit messages, categorizes changes, and creates a beautifully formatted changelog in Markdown format.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83e\udd16 AI-powered Analysis: Uses OpenAI's GPT models to understand commit messages and generate meaningful changelog entries</li> <li>\ud83d\udd04 Semantic Versioning: Automatically determines the next version based on the changes detected</li> <li>\ud83c\udff7\ufe0f Smart Categorization: Groups changes into categories like features, bug fixes, and improvements</li> <li>\u2728 Beautiful Formatting: Creates well-structured Markdown with emojis and consistent styling</li> <li>\ud83e\udde0 Conventional Commit Support: Works with conventional commit messages (feat:, fix:, etc.)</li> <li>\ud83d\udd8b\ufe0f Interactive Mode: Allows you to review and edit the changelog before saving</li> <li>\ud83d\udee0\ufe0f Flexible Configuration: Supports both global and project-specific settings</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<p>Here's what a generated changelog might look like:</p> <pre><code>## [1.2.0] - 2024-10-20\n\n### \u2728 Features\n- Add support for interactive editing mode\n- Implement automatic conventional commit detection\n\n### \ud83d\udc1b Bug Fixes\n- Resolve issue with version detection on Windows\n- Fix token counting logic for large repositories\n\n### \ud83d\udd04 Changes\n- Update default model to gpt-4o\n- Improve commit message grouping algorithm\n\n### \ud83d\udd27 Maintenance\n- Update dependencies to latest versions\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<pre><code># Install GPTChangelog\npip install gptchangelog\n\n# Initialize configuration\ngptchangelog config init\n\n# Generate changelog\ngptchangelog generate\n</code></pre> <p>Check out the Getting Started guide for more detailed instructions.</p>"},{"location":"#why-gptchangelog","title":"Why GPTChangelog?","text":"<p>Maintaining a good changelog is essential for any project, but it can be tedious and time-consuming. GPTChangelog automates this process, saving you time while creating high-quality, consistent changelogs that your users will appreciate.</p> <p>GPTChangelog excels at:</p> <ul> <li>Understanding the intent behind commit messages</li> <li>Grouping related changes together</li> <li>Eliminating redundancy and noise</li> <li>Creating human-readable descriptions</li> <li>Maintaining consistent formatting</li> </ul>"},{"location":"#license","title":"License","text":"<p>GPTChangelog is released under the MIT License.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get up and running with GPTChangelog quickly.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Git repository</li> <li>OpenAI API key</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install GPTChangelog using pip:</p> <pre><code>pip install gptchangelog\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<p>Before using GPTChangelog, you need to configure it with your OpenAI API key:</p> <pre><code>gptchangelog config init\n</code></pre> <p>This will prompt you for:</p> <ol> <li>Configuration type (global or project-specific)</li> <li>Your OpenAI API key</li> <li>The model to use (default: gpt-4o)</li> <li>Maximum context tokens (default: 80000)</li> </ol>"},{"location":"getting-started/#global-vs-project-configuration","title":"Global vs. Project Configuration","text":"<ul> <li>Global configuration is stored in <code>~/.config/gptchangelog/config.ini</code> and applies to all projects</li> <li>Project configuration is stored in <code>./.gptchangelog/config.ini</code> and only applies to the current project</li> </ul> <p>Project configuration takes precedence over global configuration when both exist.</p>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#generate-a-changelog","title":"Generate a Changelog","text":"<p>To generate a changelog from your latest tag to the current HEAD:</p> <pre><code>gptchangelog generate\n</code></pre> <p>This will:</p> <ol> <li>Find your latest git tag</li> <li>Fetch all commit messages since that tag</li> <li>Process and analyze the commit messages using OpenAI</li> <li>Determine the next version based on semantic versioning</li> <li>Generate a well-structured changelog</li> <li>Prepend it to your CHANGELOG.md file</li> </ol>"},{"location":"getting-started/#interactive-mode","title":"Interactive Mode","text":"<p>For more control, use interactive mode:</p> <pre><code>gptchangelog generate --interactive\n</code></pre> <p>This allows you to review and edit the changelog before saving it.</p>"},{"location":"getting-started/#custom-commit-range","title":"Custom Commit Range","text":"<p>You can specify a custom range of commits:</p> <pre><code>gptchangelog generate --since v1.0.0 --to v2.0.0\n</code></pre>"},{"location":"getting-started/#output-to-a-different-file","title":"Output to a Different File","text":"<p>By default, the changelog is prepended to <code>CHANGELOG.md</code>, but you can specify a different file:</p> <pre><code>gptchangelog generate --output docs/CHANGES.md\n</code></pre>"},{"location":"getting-started/#dry-run","title":"Dry Run","text":"<p>To preview the changelog without saving it:</p> <pre><code>gptchangelog generate --dry-run\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about configuration options</li> <li>Explore advanced usage</li> <li>Check out templates</li> </ul>"},{"location":"developer-guide/contributing/","title":"Contributing to GPTChangelog","text":"<p>Thank you for your interest in contributing to GPTChangelog! This guide will help you get started with development and show you how to contribute to the project.</p>"},{"location":"developer-guide/contributing/#development-setup","title":"Development Setup","text":""},{"location":"developer-guide/contributing/#fork-and-clone-the-repository","title":"Fork and Clone the Repository","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:    <pre><code>git clone https://github.com/your-username/gptchangelog.git\ncd gptchangelog\n</code></pre></li> </ol>"},{"location":"developer-guide/contributing/#create-a-virtual-environment","title":"Create a Virtual Environment","text":"<p>It's recommended to use a virtual environment for development:</p> <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre>"},{"location":"developer-guide/contributing/#install-development-dependencies","title":"Install Development Dependencies","text":"<p>Install the package in development mode:</p> <pre><code>pip install -e \".[dev]\"\n</code></pre> <p>This will install the package and all development dependencies.</p>"},{"location":"developer-guide/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"developer-guide/contributing/#running-tests","title":"Running Tests","text":"<p>Run tests using pytest:</p> <pre><code>pytest\n</code></pre> <p>For coverage information:</p> <pre><code>pytest --cov=gptchangelog\n</code></pre>"},{"location":"developer-guide/contributing/#code-style","title":"Code Style","text":"<p>GPTChangelog follows the PEP 8 style guide. We use Black for code formatting and isort for import sorting:</p> <pre><code>black gptchangelog tests\nisort gptchangelog tests\n</code></pre>"},{"location":"developer-guide/contributing/#type-checking","title":"Type Checking","text":"<p>We use mypy for type checking:</p> <pre><code>mypy gptchangelog\n</code></pre>"},{"location":"developer-guide/contributing/#running-the-cli-in-development","title":"Running the CLI in Development","text":"<p>When developing, you can run the CLI directly:</p> <pre><code>python -m gptchangelog generate\n</code></pre>"},{"location":"developer-guide/contributing/#making-contributions","title":"Making Contributions","text":""},{"location":"developer-guide/contributing/#creating-a-branch","title":"Creating a Branch","text":"<p>Create a branch for your changes:</p> <pre><code>git checkout -b feature/your-feature-name\n</code></pre>"},{"location":"developer-guide/contributing/#making-changes","title":"Making Changes","text":"<ol> <li>Make your changes to the code</li> <li>Add or update tests as needed</li> <li>Run the tests to make sure they pass</li> <li>Update documentation if needed</li> </ol>"},{"location":"developer-guide/contributing/#committing-changes","title":"Committing Changes","text":"<p>We follow the Conventional Commits specification for commit messages:</p> <pre><code>feat: add new feature\nfix: fix bug in token counting\ndocs: update installation instructions\nrefactor: improve commit analysis logic\ntest: add tests for version determination\nchore: update dependencies\n</code></pre>"},{"location":"developer-guide/contributing/#submitting-a-pull-request","title":"Submitting a Pull Request","text":"<ol> <li> <p>Push your changes to your fork:    <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Create a pull request on GitHub</p> </li> <li>Describe your changes in the pull request</li> <li>Link any relevant issues</li> </ol>"},{"location":"developer-guide/contributing/#code-review","title":"Code Review","text":"<p>All contributions go through code review before they are merged. You may be asked to make changes to your pull request based on feedback.</p>"},{"location":"developer-guide/contributing/#project-structure","title":"Project Structure","text":"<p>Here's an overview of the project structure:</p> <pre><code>gptchangelog/\n\u251c\u2500\u2500 __init__.py           # Package metadata\n\u251c\u2500\u2500 __main__.py           # Entry point\n\u251c\u2500\u2500 cli.py                # Command-line interface\n\u251c\u2500\u2500 config.py             # Configuration management\n\u251c\u2500\u2500 git_utils.py          # Git utilities\n\u251c\u2500\u2500 openai_utils.py       # OpenAI API integration\n\u251c\u2500\u2500 utils.py              # Utility functions\n\u2514\u2500\u2500 templates/            # Prompt templates\n    \u251c\u2500\u2500 changelog_prompt.txt\n    \u251c\u2500\u2500 commits_prompt.txt\n    \u2514\u2500\u2500 version_prompt.txt\n</code></pre>"},{"location":"developer-guide/contributing/#documentation","title":"Documentation","text":""},{"location":"developer-guide/contributing/#building-documentation","title":"Building Documentation","text":"<p>We use MkDocs for documentation:</p> <pre><code># Install MkDocs and plugins\npip install mkdocs-material mkdocstrings[python] mkdocs-git-revision-date-localized-plugin\n\n# Serve documentation locally\nmkdocs serve\n</code></pre>"},{"location":"developer-guide/contributing/#documentation-structure","title":"Documentation Structure","text":"<p>The documentation is in the <code>docs/</code> directory:</p> <pre><code>docs/\n\u251c\u2500\u2500 index.md              # Home page\n\u251c\u2500\u2500 getting-started.md    # Getting started guide\n\u251c\u2500\u2500 user-guide/           # User guide\n\u251c\u2500\u2500 developer-guide/      # Developer guide\n\u2514\u2500\u2500 examples.md           # Examples\n</code></pre>"},{"location":"developer-guide/contributing/#release-process","title":"Release Process","text":"<ol> <li>Update version in <code>gptchangelog/__init__.py</code></li> <li>Update CHANGELOG.md using GPTChangelog itself</li> <li>Create a new tag and push it:    <pre><code>git tag v1.2.3\ngit push origin v1.2.3\n</code></pre></li> <li>The CI pipeline will build and publish the package to PyPI</li> </ol>"},{"location":"developer-guide/contributing/#questions-and-discussions","title":"Questions and Discussions","text":"<p>If you have questions or want to discuss development, please:</p> <ol> <li>Open an issue on GitHub</li> <li>Join our community discussions on GitHub Discussions</li> </ol> <p>Thank you for contributing to GPTChangelog!</p>"},{"location":"user-guide/basic-usage/","title":"Basic Usage","text":"<p>This page covers the basic usage of GPTChangelog for generating changelogs from your git commits.</p>"},{"location":"user-guide/basic-usage/#command-line-interface","title":"Command Line Interface","text":"<p>GPTChangelog provides a command-line interface with several commands and options.</p>"},{"location":"user-guide/basic-usage/#main-commands","title":"Main Commands","text":"<ul> <li><code>gptchangelog generate</code>: Generate a changelog</li> <li><code>gptchangelog config</code>: Manage configuration</li> <li><code>gptchangelog config init</code>: Initialize configuration</li> <li><code>gptchangelog config show</code>: Show current configuration</li> <li><code>gptchangelog --version</code>: Show version information</li> <li><code>gptchangelog --help</code>: Show help information</li> </ul>"},{"location":"user-guide/basic-usage/#generating-a-changelog","title":"Generating a Changelog","text":"<p>The most common operation is generating a changelog from your git commit history.</p>"},{"location":"user-guide/basic-usage/#simple-usage","title":"Simple Usage","text":"<p>To generate a changelog from your latest tag to the current HEAD:</p> <pre><code>gptchangelog generate\n</code></pre> <p>This will:</p> <ol> <li>Find your latest git tag</li> <li>Fetch all commit messages since that tag</li> <li>Process them using OpenAI</li> <li>Determine the next version based on semantic versioning</li> <li>Generate a well-structured changelog</li> <li>Prepend it to your CHANGELOG.md file</li> </ol>"},{"location":"user-guide/basic-usage/#example-output","title":"Example Output","text":"<p>The generated changelog will look something like this:</p> <pre><code>## [1.2.0] - 2024-10-20\n\n### \u2728 Features\n- Add support for interactive editing mode\n- Implement automatic conventional commit detection\n\n### \ud83d\udc1b Bug Fixes\n- Resolve issue with version detection on Windows\n- Fix token counting logic for large repositories\n\n### \ud83d\udd04 Changes\n- Update default model to gpt-4o\n- Improve commit message grouping algorithm\n</code></pre>"},{"location":"user-guide/basic-usage/#common-options","title":"Common Options","text":"<p>Here are some common options for the <code>generate</code> command:</p>"},{"location":"user-guide/basic-usage/#custom-commit-range","title":"Custom Commit Range","text":"<p>You can specify a custom range of commits:</p> <pre><code>gptchangelog generate --since v1.0.0\n</code></pre> <p>Or between two specific references:</p> <pre><code>gptchangelog generate --since v1.0.0 --to v2.0.0-beta\n</code></pre>"},{"location":"user-guide/basic-usage/#custom-output-file","title":"Custom Output File","text":"<p>By default, the changelog is prepended to <code>CHANGELOG.md</code>, but you can specify a different file:</p> <pre><code>gptchangelog generate --output docs/CHANGES.md\n</code></pre>"},{"location":"user-guide/basic-usage/#current-version-override","title":"Current Version Override","text":"<p>You can override the automatically detected version:</p> <pre><code>gptchangelog generate --current-version 1.5.0\n</code></pre>"},{"location":"user-guide/basic-usage/#dry-run","title":"Dry Run","text":"<p>To preview the changelog without saving it:</p> <pre><code>gptchangelog generate --dry-run\n</code></pre>"},{"location":"user-guide/basic-usage/#exit-codes","title":"Exit Codes","text":"<p>GPTChangelog returns the following exit codes:</p> <ul> <li><code>0</code>: Success</li> <li><code>1</code>: Error (configuration error, git error, API error, etc.)</li> </ul> <p>You can use these exit codes in scripts to check if the command succeeded:</p> <pre><code>gptchangelog generate\nif [ $? -eq 0 ]; then\n  echo \"Changelog generated successfully\"\nelse\n  echo \"Error generating changelog\"\nfi\n</code></pre>"},{"location":"user-guide/basic-usage/#error-handling","title":"Error Handling","text":"<p>If GPTChangelog encounters an error, it will display an error message and exit with code 1. Common errors include:</p> <ul> <li>Configuration errors (missing API key)</li> <li>Git errors (not a git repository, no commits found)</li> <li>OpenAI API errors (authentication, rate limits)</li> <li>File I/O errors (permission denied, file not found)</li> </ul> <p>Check the error message for details on how to resolve the issue.</p>"},{"location":"user-guide/configuration/","title":"Configuration","text":"<p>GPTChangelog can be configured at both the global and project levels. This page explains all available configuration options and how to manage them.</p>"},{"location":"user-guide/configuration/#configuration-locations","title":"Configuration Locations","text":"<p>GPTChangelog looks for configuration in the following locations, in order of precedence:</p> <ol> <li>Project-specific configuration: <code>./.gptchangelog/config.ini</code></li> <li>Global configuration: <code>~/.config/gptchangelog/config.ini</code></li> </ol> <p>If a setting is defined in both places, the project-specific setting takes precedence.</p>"},{"location":"user-guide/configuration/#managing-configuration","title":"Managing Configuration","text":""},{"location":"user-guide/configuration/#initializing-configuration","title":"Initializing Configuration","text":"<p>To create a new configuration file:</p> <pre><code>gptchangelog config init\n</code></pre> <p>You'll be prompted to choose between global or project-specific configuration and enter your OpenAI API key and other settings.</p>"},{"location":"user-guide/configuration/#viewing-current-configuration","title":"Viewing Current Configuration","text":"<p>To see your current configuration:</p> <pre><code>gptchangelog config show\n</code></pre> <p>This will display both global and project-specific configurations if they exist.</p>"},{"location":"user-guide/configuration/#configuration-file-format","title":"Configuration File Format","text":"<p>The configuration file uses the INI format:</p> <pre><code>[openai]\napi_key = your-api-key-here\nmodel = gpt-4o\nmax_context_tokens = 80000\n</code></pre>"},{"location":"user-guide/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"user-guide/configuration/#openai-settings","title":"OpenAI Settings","text":"Option Description Default <code>api_key</code> Your OpenAI API key (Required) <code>model</code> The OpenAI model to use <code>gpt-4o</code> <code>max_context_tokens</code> Maximum tokens to use in each API call <code>80000</code>"},{"location":"user-guide/configuration/#environment-variables","title":"Environment Variables","text":"<p>You can also use environment variables to override configuration settings:</p> Variable Corresponding Config Option <code>OPENAI_API_KEY</code> <code>[openai] api_key</code> <code>GPTCHANGELOG_MODEL</code> <code>[openai] model</code> <code>GPTCHANGELOG_MAX_TOKENS</code> <code>[openai] max_context_tokens</code> <p>Environment variables take precedence over configuration file settings.</p>"},{"location":"user-guide/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"user-guide/configuration/#using-different-models","title":"Using Different Models","text":"<p>GPTChangelog works best with GPT-4 variants, but you can use other models:</p> <pre><code>[openai]\nmodel = gpt-3.5-turbo\n</code></pre> <p>Smaller models may produce less comprehensive results but use fewer tokens.</p>"},{"location":"user-guide/configuration/#token-management","title":"Token Management","text":"<p>The <code>max_context_tokens</code> setting controls how many tokens are used in each API call. If you have a large repository with many commits, you might need to adjust this:</p> <pre><code>[openai]\nmax_context_tokens = 120000\n</code></pre> <p>Keep in mind that larger values use more API tokens and may be more expensive.</p>"},{"location":"user-guide/configuration/#multiple-configurations","title":"Multiple Configurations","text":"<p>You can maintain different configurations for different projects:</p> <ol> <li>Set up a global configuration with default settings</li> <li>Create project-specific configurations for projects with special requirements</li> </ol>"},{"location":"user-guide/configuration/#example-configurations","title":"Example Configurations","text":""},{"location":"user-guide/configuration/#minimal-configuration","title":"Minimal Configuration","text":"<pre><code>[openai]\napi_key = your-api-key-here\n</code></pre>"},{"location":"user-guide/configuration/#full-configuration","title":"Full Configuration","text":"<pre><code>[openai]\napi_key = your-api-key-here\nmodel = gpt-4o\nmax_context_tokens = 80000\n</code></pre>"},{"location":"user-guide/configuration/#configuration-for-large-repositories","title":"Configuration for Large Repositories","text":"<pre><code>[openai]\napi_key = your-api-key-here\nmodel = gpt-4o\nmax_context_tokens = 120000\n</code></pre>"},{"location":"user-guide/configuration/#configuration-for-lower-cost","title":"Configuration for Lower Cost","text":"<pre><code>[openai]\napi_key = your-api-key-here\nmodel = gpt-3.5-turbo\nmax_context_tokens = 60000\n</code></pre>"},{"location":"user-guide/installation/","title":"Installation","text":"<p>This page provides detailed installation instructions for GPTChangelog.</p>"},{"location":"user-guide/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8 or higher</li> <li>Git (installed and in your PATH)</li> <li>OpenAI API key</li> </ul>"},{"location":"user-guide/installation/#installing-with-pip","title":"Installing with pip","text":"<p>The recommended way to install GPTChangelog is using pip:</p> <pre><code>pip install gptchangelog\n</code></pre> <p>This will install GPTChangelog and all its dependencies.</p>"},{"location":"user-guide/installation/#installing-from-source","title":"Installing from Source","text":"<p>If you prefer to install from source, you can clone the repository and install it:</p> <pre><code>git clone https://github.com/username/gptchangelog.git\ncd gptchangelog\npip install -e .\n</code></pre> <p>The <code>-e</code> flag installs the package in \"editable\" mode, which is useful if you plan to modify the source code.</p>"},{"location":"user-guide/installation/#dependencies","title":"Dependencies","text":"<p>GPTChangelog depends on the following packages:</p> <ul> <li><code>openai</code>: For interacting with OpenAI's API</li> <li><code>gitpython</code>: For accessing git repository information</li> <li><code>tiktoken</code>: For token counting and management</li> <li><code>rich</code>: For beautiful terminal output</li> <li><code>setuptools</code>: For packaging utilities</li> </ul> <p>These dependencies are automatically installed when you install GPTChangelog using pip.</p>"},{"location":"user-guide/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that GPTChangelog is installed correctly, run:</p> <pre><code>gptchangelog --version\n</code></pre> <p>This should display the version number of GPTChangelog.</p>"},{"location":"user-guide/installation/#setting-up-your-environment","title":"Setting Up Your Environment","text":""},{"location":"user-guide/installation/#openai-api-key","title":"OpenAI API Key","text":"<p>You'll need an OpenAI API key to use GPTChangelog. If you don't have one, you can get it from the OpenAI website.</p> <p>You can configure your API key in two ways:</p> <ol> <li> <p>Through the configuration file (recommended):    <pre><code>gptchangelog config init\n</code></pre></p> </li> <li> <p>Using an environment variable:    <pre><code>export OPENAI_API_KEY=your-api-key\n</code></pre></p> </li> </ol>"},{"location":"user-guide/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/installation/#common-installation-issues","title":"Common Installation Issues","text":"<p>Package not found</p> <p>If you get a \"command not found\" error after installation, make sure your Python scripts directory is in your PATH.</p> <p>Dependency conflicts</p> <p>If you encounter dependency conflicts, try installing in a virtual environment:</p> <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install gptchangelog\n</code></pre> <p>Git not found</p> <p>If you get an error about Git not being found, make sure Git is installed and in your PATH.</p>"},{"location":"user-guide/installation/#getting-help","title":"Getting Help","text":"<p>If you continue to experience issues, please:</p> <ol> <li>Check the GitHub issues to see if your problem has been reported</li> <li>Open a new issue if needed, providing details about your environment and the error messages</li> </ol>"}]}