{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GPTChangelog","text":"<p>Automatically generate detailed, well-structured changelogs from your git commit history using OpenAI's GPT models.</p>"},{"location":"#overview","title":"Overview","text":"<p>GPTChangelog is a powerful command-line tool that leverages OpenAI's GPT models to automatically generate high-quality changelogs from your git commit history. It analyzes your commit messages, categorizes changes, and creates a beautifully formatted changelog in Markdown format.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83e\udd16 AI-powered Analysis: Uses OpenAI's GPT models to understand commit messages and generate meaningful changelog entries</li> <li>\ud83d\udd04 Semantic Versioning: Automatically determines the next version based on the changes detected</li> <li>\ud83c\udff7\ufe0f Smart Categorization: Groups changes into categories like features, bug fixes, and improvements</li> <li>\u2728 Beautiful Formatting: Creates well-structured Markdown with emojis and consistent styling</li> <li>\ud83e\udde0 Conventional Commit Support: Works with conventional commit messages (feat:, fix:, etc.)</li> <li>\ud83d\udd8b\ufe0f Interactive Mode: Allows you to review and edit the changelog before saving</li> <li>\ud83d\udee0\ufe0f Flexible Configuration: Supports both global and project-specific settings</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<p>Here's what a generated changelog might look like:</p> <pre><code>## [1.2.0] - 2024-10-20\n\n### \u2728 Features\n- Add support for interactive editing mode\n- Implement automatic conventional commit detection\n\n### \ud83d\udc1b Bug Fixes\n- Resolve issue with version detection on Windows\n- Fix token counting logic for large repositories\n\n### \ud83d\udd04 Changes\n- Update default model to gpt-4o\n- Improve commit message grouping algorithm\n\n### \ud83d\udd27 Maintenance\n- Update dependencies to latest versions\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<pre><code># Install GPTChangelog\npip install gptchangelog\n\n# Initialize configuration\ngptchangelog config init\n\n# Generate changelog\ngptchangelog generate\n</code></pre> <p>Check out the Getting Started guide for more detailed instructions.</p>"},{"location":"#why-gptchangelog","title":"Why GPTChangelog?","text":"<p>Maintaining a good changelog is essential for any project, but it can be tedious and time-consuming. GPTChangelog automates this process, saving you time while creating high-quality, consistent changelogs that your users will appreciate.</p> <p>GPTChangelog excels at:</p> <ul> <li>Understanding the intent behind commit messages</li> <li>Grouping related changes together</li> <li>Eliminating redundancy and noise</li> <li>Creating human-readable descriptions</li> <li>Maintaining consistent formatting</li> </ul>"},{"location":"#license","title":"License","text":"<p>GPTChangelog is released under the MIT License.</p>"},{"location":"examples/","title":"Examples","text":"<p>This page provides practical examples of using GPTChangelog in different scenarios.</p>"},{"location":"examples/#basic-examples","title":"Basic Examples","text":""},{"location":"examples/#generating-a-changelog","title":"Generating a Changelog","text":"<p>The most basic usage is to generate a changelog from your latest tag:</p> <pre><code>gptchangelog generate\n</code></pre> <p>Example output:</p> <pre><code>## [1.2.0] - 2024-10-20\n\n### \u2728 Features\n- Add support for interactive editing mode\n- Implement automatic conventional commit detection\n\n### \ud83d\udc1b Bug Fixes\n- Resolve issue with version detection on Windows\n- Fix token counting logic for large repositories\n\n### \ud83d\udd04 Changes\n- Update default model to gpt-4o\n- Improve commit message grouping algorithm\n</code></pre>"},{"location":"examples/#using-interactive-mode","title":"Using Interactive Mode","text":"<p>To review and edit the changelog before saving:</p> <pre><code>gptchangelog generate --interactive\n</code></pre> <p>This will show you the generated changelog and prompt you to edit it before saving.</p>"},{"location":"examples/#generating-a-changelog-between-tags","title":"Generating a Changelog Between Tags","text":"<p>To generate a changelog between two specific tags:</p> <pre><code>gptchangelog generate --since v1.0.0 --to v2.0.0\n</code></pre>"},{"location":"examples/#outputting-to-a-different-file","title":"Outputting to a Different File","text":"<p>To save the changelog to a different file:</p> <pre><code>gptchangelog generate --output RELEASE_NOTES.md\n</code></pre>"},{"location":"examples/#real-world-scenarios","title":"Real-World Scenarios","text":""},{"location":"examples/#pre-release-workflow","title":"Pre-Release Workflow","text":"<p>Before creating a new release, generate a changelog to review the changes:</p> <pre><code># Generate changelog without saving\ngptchangelog generate --dry-run\n\n# If it looks good, create a new tag\ngit tag -a v1.2.0 -m \"Release v1.2.0\"\n\n# Generate and save the final changelog\ngptchangelog generate\n</code></pre>"},{"location":"examples/#release-notes-for-github","title":"Release Notes for GitHub","text":"<p>Generate release notes for a GitHub release:</p> <pre><code># Get the previous tag\nPREV_TAG=$(git describe --tags --abbrev=0 --match \"v*\" HEAD^)\nCURRENT_TAG=$(git describe --tags --abbrev=0)\n\n# Generate release notes\ngptchangelog generate --since $PREV_TAG --to $CURRENT_TAG --output RELEASE_NOTES.md\n\n# Create GitHub release (using gh CLI)\ngh release create $CURRENT_TAG --notes-file RELEASE_NOTES.md\n</code></pre>"},{"location":"examples/#automated-changelog-for-cicd","title":"Automated Changelog for CI/CD","text":"<p>In a CI/CD pipeline, automatically generate a changelog for each release:</p> <pre><code>#!/bin/bash\n# This script is part of a CI/CD pipeline\n\n# Set up environment\npip install gptchangelog\n\n# Get the previous tag\nPREV_TAG=$(git describe --tags --abbrev=0 --match \"v*\" HEAD^)\nCURRENT_TAG=$(git describe --tags --abbrev=0)\n\n# Generate changelog\ngptchangelog generate --since $PREV_TAG --to $CURRENT_TAG\n\n# Commit and push the updated changelog\ngit add CHANGELOG.md\ngit commit -m \"Update changelog for $CURRENT_TAG\"\ngit push origin main\n</code></pre>"},{"location":"examples/#advanced-examples","title":"Advanced Examples","text":""},{"location":"examples/#custom-template-example","title":"Custom Template Example","text":"<p>Create a custom template for your project:</p> <ol> <li> <p>Create a directory for templates:    <pre><code>mkdir -p .gptchangelog/templates\n</code></pre></p> </li> <li> <p>Create a custom changelog template:    <pre><code>cat &gt; .gptchangelog/templates/changelog_prompt.txt &lt;&lt; 'EOF'\n# $project_name Release Notes\n\n## Version $next_version ($current_date)\n\nChanges since previous release:\n\n$commit_messages\n\nInstructions:\n1. Format as a detailed release notes document\n2. Group changes into these categories:\n   - New Features\n   - Improvements\n   - Bug Fixes\n   - Security Updates\n   - Documentation\n3. For each change, provide a clear description of what changed and why it matters\n4. Highlight breaking changes with a \"BREAKING\" prefix\n5. Use bullet points for each change\n6. Include credit for contributors where applicable\nEOF\n</code></pre></p> </li> <li> <p>Use the custom template:    <pre><code>gptchangelog generate\n</code></pre></p> </li> </ol>"},{"location":"examples/#integration-with-other-tools","title":"Integration with Other Tools","text":""},{"location":"examples/#combining-with-conventional-commits-validation","title":"Combining with Conventional Commits Validation","text":"<p>Use GPTChangelog with commitlint to enforce conventional commits:</p> <pre><code># Install commitlint\nnpm install -g @commitlint/cli @commitlint/config-conventional\n\n# Set up commitlint\necho \"module.exports = {extends: ['@commitlint/config-conventional']}\" &gt; commitlint.config.js\n\n# Add a pre-commit hook (with husky)\nnpx husky add .husky/commit-msg 'npx --no -- commitlint --edit \"$1\"'\n\n# Later, generate a changelog from the well-formatted commits\ngptchangelog generate\n</code></pre>"},{"location":"examples/#generating-release-notes-for-different-audiences","title":"Generating Release Notes for Different Audiences","text":"<p>You can generate different types of release notes for different audiences:</p> <pre><code># Technical release notes for developers\ngptchangelog generate --output DEVELOPER_NOTES.md\n\n# User-friendly release notes\ncat &gt; .gptchangelog/templates/user_changelog.txt &lt;&lt; 'EOF'\n# What's New in $project_name $next_version\n\nRelease Date: $current_date\n\n$commit_messages\n\nInstructions:\n1. Write this as a user-friendly document explaining what's new\n2. Focus on benefits and improvements from the user's perspective\n3. Avoid technical details unless they directly affect users\n4. Use simple, clear language\n5. Group into \"New Features\", \"Improvements\", and \"Fixed Issues\"\nEOF\n\nTEMPLATE_PATH=.gptchangelog/templates/user_changelog.txt gptchangelog generate --output WHATS_NEW.md\n</code></pre>"},{"location":"examples/#multi-language-changelogs","title":"Multi-Language Changelogs","text":"<p>Generate changelogs in multiple languages:</p> <pre><code># First, generate the English changelog\ngptchangelog generate --output CHANGELOG.en.md\n\n# Then, generate a French version using a translator API or service\ncat CHANGELOG.en.md | translator_service en fr &gt; CHANGELOG.fr.md\n\n# Alternatively, use GPT for translation\ncat &gt; .gptchangelog/templates/french_changelog.txt &lt;&lt; 'EOF'\n# Changelog in French\n\nEnglish changelog:\n$commit_messages\n\nInstructions:\n1. Translate the above changelog to French\n2. Maintain the same structure and meaning\n3. Use appropriate French terminology for technical terms\nEOF\n\n# Then use this template to generate the French changelog\nTEMPLATE_PATH=.gptchangelog/templates/french_changelog.txt gptchangelog generate --dry-run &gt; CHANGELOG.fr.md\n</code></pre>"},{"location":"examples/#examples-for-specific-project-types","title":"Examples for Specific Project Types","text":""},{"location":"examples/#python-package-example","title":"Python Package Example","text":"<p>For a Python package:</p> <pre><code># Before a new release\n# 1. Update version in setup.py or __init__.py\n# 2. Generate changelog\ngptchangelog generate\n# 3. Commit changes\ngit add CHANGELOG.md setup.py\ngit commit -m \"Prepare release X.Y.Z\"\n# 4. Create tag\ngit tag -a vX.Y.Z -m \"Release vX.Y.Z\"\n# 5. Push changes and tag\ngit push origin main --tags\n# 6. Build and publish\npython -m build\ntwine upload dist/*\n</code></pre>"},{"location":"examples/#javascriptnodejs-project-example","title":"JavaScript/Node.js Project Example","text":"<p>For a Node.js project:</p> <pre><code># Before a new release\n# 1. Update version in package.json\nnpm version patch # or minor, or major\n# 2. Generate changelog\ngptchangelog generate\n# 3. Commit changes\ngit add CHANGELOG.md\ngit commit -m \"Update changelog for version $(node -p \"require('./package.json').version\")\"\n# 4. Push changes (npm version already created the tag)\ngit push origin main --tags\n# 5. Publish\nnpm publish\n</code></pre>"},{"location":"examples/#web-application-example","title":"Web Application Example","text":"<p>For a web application:</p> <pre><code># Generate a user-friendly \"What's New\" page\ngptchangelog generate --output src/assets/whats-new.md\n\n# Then in your app, you can display this content\n# For example, in a React component:\n# import WhatsNew from '../assets/whats-new.md';\n# function WhatsNewModal() {\n#   return &lt;ReactMarkdown&gt;{WhatsNew}&lt;/ReactMarkdown&gt;;\n# }\n</code></pre>"},{"location":"examples/#troubleshooting-examples","title":"Troubleshooting Examples","text":""},{"location":"examples/#handling-large-repositories","title":"Handling Large Repositories","text":"<p>For very large repositories with many commits:</p> <pre><code># Generate changelog for just the last 100 commits\ngit log -n 100 --pretty=format:\"%H\" | tail -n 1 | xargs -I{} gptchangelog generate --since {}\n\n# Generate changelog for the last month\nONE_MONTH_AGO=$(git log --since=\"1 month ago\" --pretty=format:\"%H\" | tail -n 1)\ngptchangelog generate --since $ONE_MONTH_AGO\n</code></pre>"},{"location":"examples/#fixing-version-detection","title":"Fixing Version Detection","text":"<p>If version detection isn't working as expected:</p> <pre><code># Manually specify the current version\ngptchangelog generate --current-version 1.5.0\n\n# Create a tag if you don't have one\ngit tag -a v1.0.0 -m \"Initial release\"\ngptchangelog generate\n</code></pre>"},{"location":"examples/#error-recovery","title":"Error Recovery","text":"<p>If you encounter an error during generation:</p> <pre><code># Enable debug mode\nexport GPTCHANGELOG_DEBUG=1\ngptchangelog generate\n\n# Try with a different model\ngptchangelog generate --model gpt-3.5-turbo\n\n# Process in smaller batches\ngit tag v1.0.0-temp\ngptchangelog generate --since v1.0.0 --to v1.0.0-temp\ngit tag -d v1.0.0-temp\n</code></pre>"},{"location":"examples/#complete-workflow-examples","title":"Complete Workflow Examples","text":""},{"location":"examples/#full-release-workflow-example","title":"Full Release Workflow Example","text":"<pre><code>#!/bin/bash\n# Complete release script\n\n# Ensure we're on the main branch\ngit checkout main\ngit pull\n\n# Determine the next version based on changes\nPREV_VERSION=$(git describe --tags --abbrev=0)\necho \"Previous version was $PREV_VERSION\"\n\n# Generate changelog and extract version\nCHANGELOG=$(gptchangelog generate --dry-run)\nNEXT_VERSION=$(echo \"$CHANGELOG\" | grep -m 1 \"## \\[\" | sed -r 's/## \\[(.*)\\].*/\\1/')\necho \"Next version will be $NEXT_VERSION\"\n\n# Update version in files\n# (This depends on your project type)\nsed -i \"s/__version__ = .*/__version__ = '$NEXT_VERSION'/\" project/__init__.py\n\n# Generate and save the changelog\ngptchangelog generate --current-version $NEXT_VERSION\n\n# Commit the changes\ngit add CHANGELOG.md project/__init__.py\ngit commit -m \"Release $NEXT_VERSION\"\n\n# Create a tag\ngit tag -a \"v$NEXT_VERSION\" -m \"Release $NEXT_VERSION\"\n\n# Push changes and tag\ngit push origin main\ngit push origin \"v$NEXT_VERSION\"\n\necho \"Released version $NEXT_VERSION\"\n</code></pre>"},{"location":"examples/#github-action-workflow-example","title":"GitHub Action Workflow Example","text":"<p><code>.github/workflows/release.yml</code>:</p> <pre><code>name: Create Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install gptchangelog\n\n      - name: Get previous tag\n        id: previoustag\n        run: |\n          echo \"PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match \"v*\" HEAD^ || git rev-list --max-parents=0 HEAD)\" &gt;&gt; $GITHUB_ENV\n\n      - name: Generate release notes\n        env:\n          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n        run: |\n          gptchangelog generate --since ${{ env.PREVIOUS_TAG }} --to ${{ github.ref_name }} --output RELEASE_NOTES.md\n\n      - name: Create GitHub Release\n        uses: softprops/action-gh-release@v1\n        with:\n          body_path: RELEASE_NOTES.md\n          files: |\n            *.tar.gz\n            *.zip\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get up and running with GPTChangelog quickly.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Git repository</li> <li>OpenAI API key</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install GPTChangelog using pip:</p> <pre><code>pip install gptchangelog\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<p>Before using GPTChangelog, you need to configure it with your OpenAI API key:</p> <pre><code>gptchangelog config init\n</code></pre> <p>This will prompt you for:</p> <ol> <li>Configuration type (global or project-specific)</li> <li>Your OpenAI API key</li> <li>The model to use (default: gpt-4o)</li> <li>Maximum context tokens (default: 80000)</li> </ol>"},{"location":"getting-started/#global-vs-project-configuration","title":"Global vs. Project Configuration","text":"<ul> <li>Global configuration is stored in <code>~/.config/gptchangelog/config.ini</code> and applies to all projects</li> <li>Project configuration is stored in <code>./.gptchangelog/config.ini</code> and only applies to the current project</li> </ul> <p>Project configuration takes precedence over global configuration when both exist.</p>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#generate-a-changelog","title":"Generate a Changelog","text":"<p>To generate a changelog from your latest tag to the current HEAD:</p> <pre><code>gptchangelog generate\n</code></pre> <p>This will:</p> <ol> <li>Find your latest git tag</li> <li>Fetch all commit messages since that tag</li> <li>Process and analyze the commit messages using OpenAI</li> <li>Determine the next version based on semantic versioning</li> <li>Generate a well-structured changelog</li> <li>Prepend it to your CHANGELOG.md file</li> </ol>"},{"location":"getting-started/#interactive-mode","title":"Interactive Mode","text":"<p>For more control, use interactive mode:</p> <pre><code>gptchangelog generate --interactive\n</code></pre> <p>This allows you to review and edit the changelog before saving it.</p>"},{"location":"getting-started/#custom-commit-range","title":"Custom Commit Range","text":"<p>You can specify a custom range of commits:</p> <pre><code>gptchangelog generate --since v1.0.0 --to v2.0.0\n</code></pre>"},{"location":"getting-started/#output-to-a-different-file","title":"Output to a Different File","text":"<p>By default, the changelog is prepended to <code>CHANGELOG.md</code>, but you can specify a different file:</p> <pre><code>gptchangelog generate --output docs/CHANGES.md\n</code></pre>"},{"location":"getting-started/#dry-run","title":"Dry Run","text":"<p>To preview the changelog without saving it:</p> <pre><code>gptchangelog generate --dry-run\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about configuration options</li> <li>Explore advanced usage</li> <li>Check out templates</li> </ul>"},{"location":"developer-guide/api-reference/","title":"API Reference","text":"<p>This page documents the primary functions and classes in GPTChangelog that you may want to use programmatically or extend.</p>"},{"location":"developer-guide/api-reference/#module-gptchangelogcli","title":"Module: <code>gptchangelog.cli</code>","text":"<p>The CLI module provides the command-line interface for GPTChangelog.</p>"},{"location":"developer-guide/api-reference/#functions","title":"Functions","text":""},{"location":"developer-guide/api-reference/#app","title":"<code>app()</code>","text":"<p>The main entry point for the command-line interface.</p> <p>Returns: - <code>int</code>: Exit code (0 for success, 1 for error)</p>"},{"location":"developer-guide/api-reference/#run_gptchangelogargs","title":"<code>run_gptchangelog(args)</code>","text":"<p>Runs the main changelog generation process.</p> <p>Parameters: - <code>args</code>: Parsed command-line arguments</p> <p>Returns: - <code>int</code>: Exit code (0 for success, 1 for error)</p>"},{"location":"developer-guide/api-reference/#module-gptchangelogconfig","title":"Module: <code>gptchangelog.config</code>","text":"<p>The configuration module handles loading and saving configuration settings.</p>"},{"location":"developer-guide/api-reference/#functions_1","title":"Functions","text":""},{"location":"developer-guide/api-reference/#load_openai_configconfig_file_nameconfigini","title":"<code>load_openai_config(config_file_name=\"config.ini\")</code>","text":"<p>Loads the OpenAI configuration from the config file.</p> <p>Parameters: - <code>config_file_name</code> (str): Name of the configuration file</p> <p>Returns: - <code>tuple</code>: (api_key, model, max_context_tokens)</p> <p>Raises: - <code>FileNotFoundError</code>: If the configuration file is not found</p>"},{"location":"developer-guide/api-reference/#init_config","title":"<code>init_config()</code>","text":"<p>Initializes a new configuration file with user input.</p> <p>Returns: - None</p>"},{"location":"developer-guide/api-reference/#show_config","title":"<code>show_config()</code>","text":"<p>Displays the current configuration settings.</p> <p>Returns: - None</p>"},{"location":"developer-guide/api-reference/#module-gptchangeloggit_utils","title":"Module: <code>gptchangelog.git_utils</code>","text":"<p>The git utilities module interacts with git repositories.</p>"},{"location":"developer-guide/api-reference/#functions_2","title":"Functions","text":""},{"location":"developer-guide/api-reference/#get_commit_messages_sincelatest_commit-to_commithead-repo_path-min_length10","title":"<code>get_commit_messages_since(latest_commit, to_commit=\"HEAD\", repo_path=\".\", min_length=10)</code>","text":"<p>Gets commit messages between two git references.</p> <p>Parameters: - <code>latest_commit</code> (str): The starting reference (commit hash, tag, etc.) - <code>to_commit</code> (str): The ending reference (defaults to \"HEAD\") - <code>repo_path</code> (str): Path to the git repository - <code>min_length</code> (int): Minimum length of commit messages to include</p> <p>Returns: - <code>tuple</code>: (from_ref, commit_messages_text)</p>"},{"location":"developer-guide/api-reference/#get_repository_namerepo","title":"<code>get_repository_name(repo)</code>","text":"<p>Extracts the repository name from a git repository.</p> <p>Parameters: - <code>repo</code> (git.Repo): Git repository object</p> <p>Returns: - <code>str</code>: Repository name</p>"},{"location":"developer-guide/api-reference/#get_latest_tagrepo","title":"<code>get_latest_tag(repo)</code>","text":"<p>Gets the latest tag from the repository.</p> <p>Parameters: - <code>repo</code> (git.Repo): Git repository object</p> <p>Returns: - <code>str</code>: Latest tag name</p>"},{"location":"developer-guide/api-reference/#analyze_commit_messagemessage","title":"<code>analyze_commit_message(message)</code>","text":"<p>Analyzes a commit message to determine its type.</p> <p>Parameters: - <code>message</code> (str): Commit message</p> <p>Returns: - <code>tuple</code>: (inferred_type, cleaned_message, is_breaking_change)</p>"},{"location":"developer-guide/api-reference/#module-gptchangelogopenai_utils","title":"Module: <code>gptchangelog.openai_utils</code>","text":"<p>The OpenAI utilities module interacts with the OpenAI API.</p>"},{"location":"developer-guide/api-reference/#functions_3","title":"Functions","text":""},{"location":"developer-guide/api-reference/#process_commit_messagesraw_commit_messages-model-max_context_tokens-contextnone","title":"<code>process_commit_messages(raw_commit_messages, model, max_context_tokens, context=None)</code>","text":"<p>Processes and refines commit messages using the OpenAI API.</p> <p>Parameters: - <code>raw_commit_messages</code> (str): Raw commit messages - <code>model</code> (str): OpenAI model to use - <code>max_context_tokens</code> (int): Maximum tokens for context - <code>context</code> (dict, optional): Additional context for prompts</p> <p>Returns: - <code>str</code>: Processed commit messages</p>"},{"location":"developer-guide/api-reference/#determine_next_versioncurrent_version-commit_messages-model-contextnone","title":"<code>determine_next_version(current_version, commit_messages, model, context=None)</code>","text":"<p>Determines the next version based on semantic versioning.</p> <p>Parameters: - <code>current_version</code> (str): Current version string - <code>commit_messages</code> (str): Processed commit messages - <code>model</code> (str): OpenAI model to use - <code>context</code> (dict, optional): Additional context for prompts</p> <p>Returns: - <code>str</code>: Next version string</p>"},{"location":"developer-guide/api-reference/#generate_changelogcommit_messages-next_version-model-contextnone","title":"<code>generate_changelog(commit_messages, next_version, model, context=None)</code>","text":"<p>Generates a changelog from processed commit messages.</p> <p>Parameters: - <code>commit_messages</code> (str): Processed commit messages - <code>next_version</code> (str): Next version string - <code>model</code> (str): OpenAI model to use - <code>context</code> (dict, optional): Additional context for prompts</p> <p>Returns: - <code>str</code>: Generated changelog in markdown format</p>"},{"location":"developer-guide/api-reference/#generate_changelog_and_next_versionraw_commit_messages-current_version-model-max_context_tokens-contextnone","title":"<code>generate_changelog_and_next_version(raw_commit_messages, current_version, model, max_context_tokens, context=None)</code>","text":"<p>Complete process to generate a changelog and determine the next version.</p> <p>Parameters: - <code>raw_commit_messages</code> (str): Raw commit messages - <code>current_version</code> (str): Current version string - <code>model</code> (str): OpenAI model to use - <code>max_context_tokens</code> (int): Maximum tokens for context - <code>context</code> (dict, optional): Additional context for prompts</p> <p>Returns: - <code>tuple</code>: (changelog, next_version)</p>"},{"location":"developer-guide/api-reference/#module-gptchangelogutils","title":"Module: <code>gptchangelog.utils</code>","text":"<p>The utilities module provides common functions used across the package.</p>"},{"location":"developer-guide/api-reference/#functions_4","title":"Functions","text":""},{"location":"developer-guide/api-reference/#get_package_version","title":"<code>get_package_version()</code>","text":"<p>Gets the package version from pkg_resources or fallback.</p> <p>Returns: - <code>str</code>: Package version</p>"},{"location":"developer-guide/api-reference/#render_prompttemplate_path-context","title":"<code>render_prompt(template_path, context)</code>","text":"<p>Renders a prompt template with provided context.</p> <p>Parameters: - <code>template_path</code> (str): Path to template file - <code>context</code> (dict): Context variables for template</p> <p>Returns: - <code>str</code>: Rendered prompt</p>"},{"location":"developer-guide/api-reference/#estimate_tokenstext-modelgpt-4o","title":"<code>estimate_tokens(text, model=\"gpt-4o\")</code>","text":"<p>Estimates the number of tokens in a text for a given model.</p> <p>Parameters: - <code>text</code> (str): Text to estimate tokens for - <code>model</code> (str): Model to use for estimation</p> <p>Returns: - <code>int</code>: Estimated number of tokens</p>"},{"location":"developer-guide/api-reference/#split_commit_messagescommit_messages-max_tokens-modelgpt-4o","title":"<code>split_commit_messages(commit_messages, max_tokens, model=\"gpt-4o\")</code>","text":"<p>Splits commit messages into batches that fit within token limits.</p> <p>Parameters: - <code>commit_messages</code> (list): List of commit message strings - <code>max_tokens</code> (int): Maximum tokens per batch - <code>model</code> (str): Model to use for estimation</p> <p>Returns: - <code>list</code>: List of batches, each a string of commit messages</p>"},{"location":"developer-guide/api-reference/#prepend_changelog_to_filechangelog-filepathchangelogmd","title":"<code>prepend_changelog_to_file(changelog, filepath=\"CHANGELOG.md\")</code>","text":"<p>Prepends the changelog to the specified file.</p> <p>Parameters: - <code>changelog</code> (str): Changelog content - <code>filepath</code> (str): Path to changelog file</p> <p>Returns: - None</p>"},{"location":"developer-guide/api-reference/#get_project_metadata","title":"<code>get_project_metadata()</code>","text":"<p>Gets metadata about the current project.</p> <p>Returns: - <code>dict</code>: Project metadata (name, version, description)</p>"},{"location":"developer-guide/api-reference/#format_commit_for_changelogcommit_message","title":"<code>format_commit_for_changelog(commit_message)</code>","text":"<p>Formats a commit message for inclusion in the changelog.</p> <p>Parameters: - <code>commit_message</code> (str): Commit message</p> <p>Returns: - <code>str</code>: Formatted commit message</p>"},{"location":"developer-guide/api-reference/#programmatic-usage","title":"Programmatic Usage","text":"<p>You can use GPTChangelog programmatically in your own Python code:</p> <pre><code>from gptchangelog.openai_utils import generate_changelog_and_next_version\nfrom gptchangelog.git_utils import get_commit_messages_since\nfrom gptchangelog.config import load_openai_config\nimport openai\n\n# Load configuration\napi_key, model, max_tokens = load_openai_config()\nopenai.api_key = api_key\n\n# Get commit messages\nfrom_ref, commit_messages = get_commit_messages_since(\"v1.0.0\")\n\n# Generate changelog\nchangelog, next_version = generate_changelog_and_next_version(\n    commit_messages, \n    from_ref, \n    model, \n    max_tokens,\n    {\"project_name\": \"My Project\"}\n)\n\n# Use the generated changelog\nprint(f\"Next version: {next_version}\")\nprint(changelog)\n</code></pre>"},{"location":"developer-guide/api-reference/#extending-gptchangelog","title":"Extending GPTChangelog","text":""},{"location":"developer-guide/api-reference/#custom-commit-processing","title":"Custom Commit Processing","text":"<p>You can extend the commit processing by creating a custom function:</p> <pre><code>def custom_commit_processor(commit_messages):\n    # Your custom processing logic\n    processed_messages = []\n    for message in commit_messages.split(\"\\n\"):\n        # Process each message\n        processed_messages.append(f\"Processed: {message}\")\n\n    return \"\\n\".join(processed_messages)\n\n# Then use it instead of the built-in processor\nfrom gptchangelog.openai_utils import generate_changelog\nchangelog = generate_changelog(\n    custom_commit_processor(commit_messages),\n    next_version,\n    model\n)\n</code></pre>"},{"location":"developer-guide/api-reference/#custom-template-rendering","title":"Custom Template Rendering","text":"<p>You can provide a custom template renderer:</p> <pre><code>def custom_template_renderer(template_path, context):\n    # Your custom template rendering logic\n    with open(template_path, \"r\") as f:\n        template = f.read()\n\n    # Simple string substitution\n    for key, value in context.items():\n        template = template.replace(f\"${key}\", str(value))\n\n    return template\n\n# Then use it in your workflow\n</code></pre>"},{"location":"developer-guide/api-reference/#adding-new-output-formats","title":"Adding New Output Formats","text":"<p>To add a new output format, create a converter function:</p> <pre><code>def convert_to_html(changelog_markdown):\n    # Convert markdown to HTML\n    # (using a library like markdown2 or similar)\n    html = f\"\"\"\n    &lt;html&gt;\n    &lt;head&gt;&lt;title&gt;Changelog&lt;/title&gt;&lt;/head&gt;\n    &lt;body&gt;\n    {markdown_to_html(changelog_markdown)}\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return html\n\n# Then use it after generating the changelog\nhtml_changelog = convert_to_html(changelog)\nwith open(\"changelog.html\", \"w\") as f:\n    f.write(html_changelog)\n</code></pre>"},{"location":"developer-guide/architecture/","title":"Architecture","text":"<p>This document provides an overview of GPTChangelog's architecture, its components, and how they interact with each other.</p>"},{"location":"developer-guide/architecture/#system-overview","title":"System Overview","text":"<p>GPTChangelog follows a modular architecture with clear separation of concerns. The system consists of several core components that work together to generate changelogs from git commit history.</p> <pre><code>graph TD\n    CLI[CLI Module] --&gt; Config[Configuration Manager]\n    CLI --&gt; GitUtils[Git Utilities]\n    CLI --&gt; OpenAIUtils[OpenAI Integration]\n    GitUtils --&gt; Repo[Git Repository]\n    OpenAIUtils --&gt; OpenAI[OpenAI API]\n    OpenAIUtils --&gt; Templates[Prompt Templates]\n    OpenAIUtils --&gt; Utils[Utility Functions]\n    CLI --&gt; Output[Output Processing]\n</code></pre>"},{"location":"developer-guide/architecture/#core-components","title":"Core Components","text":""},{"location":"developer-guide/architecture/#cli-module-clipy","title":"CLI Module (<code>cli.py</code>)","text":"<p>The CLI module is the entry point for the application. It:</p> <ul> <li>Parses command-line arguments</li> <li>Handles subcommands (generate, config)</li> <li>Coordinates the workflow between other components</li> <li>Manages output formatting and user interaction</li> </ul>"},{"location":"developer-guide/architecture/#configuration-manager-configpy","title":"Configuration Manager (<code>config.py</code>)","text":"<p>The Configuration Manager handles loading, saving, and merging configuration from different sources:</p> <ul> <li>Project-specific configuration</li> <li>Global user configuration</li> <li>Environment variables</li> <li>Command-line arguments</li> </ul>"},{"location":"developer-guide/architecture/#git-utilities-git_utilspy","title":"Git Utilities (<code>git_utils.py</code>)","text":"<p>The Git Utilities module interacts with the git repository:</p> <ul> <li>Extracts commit messages</li> <li>Analyzes commit history</li> <li>Determines version information</li> <li>Parses conventional commits</li> </ul>"},{"location":"developer-guide/architecture/#openai-integration-openai_utilspy","title":"OpenAI Integration (<code>openai_utils.py</code>)","text":"<p>The OpenAI Integration module handles communication with the OpenAI API:</p> <ul> <li>Prepares prompts using templates</li> <li>Sends requests to OpenAI</li> <li>Processes and sanitizes responses</li> <li>Handles error conditions and retries</li> </ul>"},{"location":"developer-guide/architecture/#utility-functions-utilspy","title":"Utility Functions (<code>utils.py</code>)","text":"<p>The Utility module provides common functionality used across the application:</p> <ul> <li>Token estimation</li> <li>Template rendering</li> <li>File manipulation</li> <li>Version parsing</li> </ul>"},{"location":"developer-guide/architecture/#data-flow","title":"Data Flow","text":"<p>The typical data flow through the system is as follows:</p> <ol> <li>User invokes the <code>generate</code> command</li> <li>CLI module parses arguments and loads configuration</li> <li>Git utilities extract commit messages from the repository</li> <li>Commit messages are processed and categorized</li> <li>OpenAI integration sends the processed messages to OpenAI</li> <li>The next version is determined based on semantic versioning</li> <li>A changelog is generated using the template</li> <li>The changelog is written to the output file</li> </ol> <pre><code>sequenceDiagram\n    participant User\n    participant CLI\n    participant Git\n    participant OpenAI\n    participant Files\n\n    User-&gt;&gt;CLI: gptchangelog generate\n    CLI-&gt;&gt;Git: Get commit messages\n    Git-&gt;&gt;CLI: Return commit messages\n    CLI-&gt;&gt;OpenAI: Process commit messages\n    OpenAI-&gt;&gt;CLI: Return processed messages\n    CLI-&gt;&gt;OpenAI: Determine next version\n    OpenAI-&gt;&gt;CLI: Return next version\n    CLI-&gt;&gt;OpenAI: Generate changelog\n    OpenAI-&gt;&gt;CLI: Return formatted changelog\n    CLI-&gt;&gt;Files: Write changelog to file\n    CLI-&gt;&gt;User: Display result\n</code></pre>"},{"location":"developer-guide/architecture/#module-relationships","title":"Module Relationships","text":""},{"location":"developer-guide/architecture/#package-structure","title":"Package Structure","text":"<p>The GPTChangelog package is organized as follows:</p> <pre><code>gptchangelog/\n\u251c\u2500\u2500 __init__.py           # Package metadata and version\n\u251c\u2500\u2500 __main__.py           # Entry point\n\u251c\u2500\u2500 cli.py                # Command-line interface\n\u251c\u2500\u2500 config.py             # Configuration management\n\u251c\u2500\u2500 git_utils.py          # Git repository interactions\n\u251c\u2500\u2500 openai_utils.py       # OpenAI API integration\n\u251c\u2500\u2500 utils.py              # Utility functions\n\u2514\u2500\u2500 templates/            # Prompt templates\n    \u251c\u2500\u2500 changelog_prompt.txt\n    \u251c\u2500\u2500 commits_prompt.txt\n    \u2514\u2500\u2500 version_prompt.txt\n</code></pre>"},{"location":"developer-guide/architecture/#dependency-graph","title":"Dependency Graph","text":"<pre><code>graph TD\n    cli --&gt; config\n    cli --&gt; git_utils\n    cli --&gt; openai_utils\n    cli --&gt; utils\n    openai_utils --&gt; utils\n    git_utils --&gt; utils\n    config --&gt; utils\n</code></pre>"},{"location":"developer-guide/architecture/#extension-points","title":"Extension Points","text":"<p>GPTChangelog is designed to be extensible. Here are the main extension points:</p>"},{"location":"developer-guide/architecture/#custom-templates","title":"Custom Templates","text":"<p>You can provide custom templates for: - Commit processing - Version determination - Changelog generation</p> <p>These templates can be placed in a <code>.gptchangelog/templates/</code> directory.</p>"},{"location":"developer-guide/architecture/#custom-git-integration","title":"Custom Git Integration","text":"<p>The git utilities module can be extended to support additional: - Repository types - Commit formats - Versioning schemes</p>"},{"location":"developer-guide/architecture/#output-formats","title":"Output Formats","text":"<p>The changelog generation can be extended to support additional output formats: - HTML - JSON - Release notes</p>"},{"location":"developer-guide/architecture/#error-handling","title":"Error Handling","text":"<p>GPTChangelog implements a comprehensive error handling strategy:</p> <ol> <li>Configuration Errors: Handled by providing clear error messages and suggestions</li> <li>Git Errors: Handled with appropriate fallbacks and user guidance</li> <li>API Errors: Includes retry logic, rate limiting awareness, and fallback behavior</li> <li>File I/O Errors: Includes proper error reporting and safe file operations</li> </ol>"},{"location":"developer-guide/architecture/#performance-considerations","title":"Performance Considerations","text":"<p>GPTChangelog addresses several performance considerations:</p> <ol> <li>Large Repositories: Batch processing for repositories with many commits</li> <li>Token Optimization: Smart token usage to minimize API costs</li> <li>Caching: Optional caching of API responses for repeated operations</li> <li>Progress Reporting: Progress indicators for long-running operations</li> </ol>"},{"location":"developer-guide/architecture/#security-considerations","title":"Security Considerations","text":"<p>GPTChangelog implements these security measures:</p> <ol> <li>API Key Handling: Secure storage of API keys</li> <li>File Permissions: Safe file operations with proper permissions</li> <li>Configuration Isolation: Separation of global and project-specific configuration</li> <li>Error Sanitization: Safe error reporting without exposing sensitive information</li> </ol>"},{"location":"developer-guide/contributing/","title":"Contributing to GPTChangelog","text":"<p>Thank you for your interest in contributing to GPTChangelog! This guide will help you get started with development and show you how to contribute to the project.</p>"},{"location":"developer-guide/contributing/#development-setup","title":"Development Setup","text":""},{"location":"developer-guide/contributing/#fork-and-clone-the-repository","title":"Fork and Clone the Repository","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:    <pre><code>git clone https://github.com/your-username/gptchangelog.git\ncd gptchangelog\n</code></pre></li> </ol>"},{"location":"developer-guide/contributing/#create-a-virtual-environment","title":"Create a Virtual Environment","text":"<p>It's recommended to use a virtual environment for development:</p> <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre>"},{"location":"developer-guide/contributing/#install-development-dependencies","title":"Install Development Dependencies","text":"<p>Install the package in development mode:</p> <pre><code>pip install -e \".[dev]\"\n</code></pre> <p>This will install the package and all development dependencies.</p>"},{"location":"developer-guide/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"developer-guide/contributing/#running-tests","title":"Running Tests","text":"<p>Run tests using pytest:</p> <pre><code>pytest\n</code></pre> <p>For coverage information:</p> <pre><code>pytest --cov=gptchangelog\n</code></pre>"},{"location":"developer-guide/contributing/#code-style","title":"Code Style","text":"<p>GPTChangelog follows the PEP 8 style guide. We use Black for code formatting and isort for import sorting:</p> <pre><code>black gptchangelog tests\nisort gptchangelog tests\n</code></pre>"},{"location":"developer-guide/contributing/#type-checking","title":"Type Checking","text":"<p>We use mypy for type checking:</p> <pre><code>mypy gptchangelog\n</code></pre>"},{"location":"developer-guide/contributing/#running-the-cli-in-development","title":"Running the CLI in Development","text":"<p>When developing, you can run the CLI directly:</p> <pre><code>python -m gptchangelog generate\n</code></pre>"},{"location":"developer-guide/contributing/#making-contributions","title":"Making Contributions","text":""},{"location":"developer-guide/contributing/#creating-a-branch","title":"Creating a Branch","text":"<p>Create a branch for your changes:</p> <pre><code>git checkout -b feature/your-feature-name\n</code></pre>"},{"location":"developer-guide/contributing/#making-changes","title":"Making Changes","text":"<ol> <li>Make your changes to the code</li> <li>Add or update tests as needed</li> <li>Run the tests to make sure they pass</li> <li>Update documentation if needed</li> </ol>"},{"location":"developer-guide/contributing/#committing-changes","title":"Committing Changes","text":"<p>We follow the Conventional Commits specification for commit messages:</p> <pre><code>feat: add new feature\nfix: fix bug in token counting\ndocs: update installation instructions\nrefactor: improve commit analysis logic\ntest: add tests for version determination\nchore: update dependencies\n</code></pre>"},{"location":"developer-guide/contributing/#submitting-a-pull-request","title":"Submitting a Pull Request","text":"<ol> <li> <p>Push your changes to your fork:    <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Create a pull request on GitHub</p> </li> <li>Describe your changes in the pull request</li> <li>Link any relevant issues</li> </ol>"},{"location":"developer-guide/contributing/#code-review","title":"Code Review","text":"<p>All contributions go through code review before they are merged. You may be asked to make changes to your pull request based on feedback.</p>"},{"location":"developer-guide/contributing/#project-structure","title":"Project Structure","text":"<p>Here's an overview of the project structure:</p> <pre><code>gptchangelog/\n\u251c\u2500\u2500 __init__.py           # Package metadata\n\u251c\u2500\u2500 __main__.py           # Entry point\n\u251c\u2500\u2500 cli.py                # Command-line interface\n\u251c\u2500\u2500 config.py             # Configuration management\n\u251c\u2500\u2500 git_utils.py          # Git utilities\n\u251c\u2500\u2500 openai_utils.py       # OpenAI API integration\n\u251c\u2500\u2500 utils.py              # Utility functions\n\u2514\u2500\u2500 templates/            # Prompt templates\n    \u251c\u2500\u2500 changelog_prompt.txt\n    \u251c\u2500\u2500 commits_prompt.txt\n    \u2514\u2500\u2500 version_prompt.txt\n</code></pre>"},{"location":"developer-guide/contributing/#documentation","title":"Documentation","text":""},{"location":"developer-guide/contributing/#building-documentation","title":"Building Documentation","text":"<p>We use MkDocs for documentation:</p> <pre><code># Install MkDocs and plugins\npip install mkdocs-material mkdocstrings[python] mkdocs-git-revision-date-localized-plugin\n\n# Serve documentation locally\nmkdocs serve\n</code></pre>"},{"location":"developer-guide/contributing/#documentation-structure","title":"Documentation Structure","text":"<p>The documentation is in the <code>docs/</code> directory:</p> <pre><code>docs/\n\u251c\u2500\u2500 index.md              # Home page\n\u251c\u2500\u2500 getting-started.md    # Getting started guide\n\u251c\u2500\u2500 user-guide/           # User guide\n\u251c\u2500\u2500 developer-guide/      # Developer guide\n\u2514\u2500\u2500 examples.md           # Examples\n</code></pre>"},{"location":"developer-guide/contributing/#release-process","title":"Release Process","text":"<ol> <li>Update version in <code>gptchangelog/__init__.py</code></li> <li>Update CHANGELOG.md using GPTChangelog itself</li> <li>Create a new tag and push it:    <pre><code>git tag v1.2.3\ngit push origin v1.2.3\n</code></pre></li> <li>The CI pipeline will build and publish the package to PyPI</li> </ol>"},{"location":"developer-guide/contributing/#questions-and-discussions","title":"Questions and Discussions","text":"<p>If you have questions or want to discuss development, please:</p> <ol> <li>Open an issue on GitHub</li> <li>Join our community discussions on GitHub Discussions</li> </ol> <p>Thank you for contributing to GPTChangelog!</p>"},{"location":"user-guide/advanced-usage/","title":"Advanced Usage","text":"<p>This guide covers advanced usage scenarios and techniques for GPTChangelog.</p>"},{"location":"user-guide/advanced-usage/#interactive-mode","title":"Interactive Mode","text":"<p>Interactive mode allows you to review and edit the generated changelog before saving it:</p> <pre><code>gptchangelog generate --interactive\n</code></pre> <p>In interactive mode, you'll be prompted to:</p> <ol> <li>Review the generated changelog</li> <li>Choose whether to edit it (opens in your default editor)</li> <li>Decide whether to save it to the changelog file</li> </ol> <p>This is useful for reviewing the AI-generated content and making adjustments before finalizing it.</p>"},{"location":"user-guide/advanced-usage/#working-with-custom-commit-ranges","title":"Working with Custom Commit Ranges","text":""},{"location":"user-guide/advanced-usage/#specific-tags-or-commits","title":"Specific Tags or Commits","text":"<p>You can generate a changelog between any two git references:</p> <pre><code># Between two tags\ngptchangelog generate --since v1.0.0 --to v2.0.0\n\n# From a specific commit to HEAD\ngptchangelog generate --since 8a7d3b9\n\n# From a tag to a branch\ngptchangelog generate --since v1.0.0 --to feature/new-feature\n</code></pre>"},{"location":"user-guide/advanced-usage/#generating-changelog-for-a-single-release","title":"Generating Changelog for a Single Release","text":"<p>To generate a changelog for a specific release:</p> <pre><code># Get the previous tag\nPREV_TAG=$(git describe --tags --abbrev=0 --match \"v*\" HEAD^)\n\n# Generate changelog from previous tag to current tag\ngptchangelog generate --since $PREV_TAG --to $(git describe --tags --abbrev=0)\n</code></pre>"},{"location":"user-guide/advanced-usage/#custom-version-handling","title":"Custom Version Handling","text":""},{"location":"user-guide/advanced-usage/#manual-version-override","title":"Manual Version Override","text":"<p>You can override the automatically determined version:</p> <pre><code>gptchangelog generate --current-version 1.5.0\n</code></pre> <p>This is useful when: - You want to maintain a specific versioning scheme - You need to create a pre-release version (e.g., beta, alpha) - The AI-determined version doesn't match your preferences</p>"},{"location":"user-guide/advanced-usage/#version-prefixes","title":"Version Prefixes","text":"<p>GPTChangelog preserves version prefixes (like \"v\" in \"v1.2.3\") in the output. It automatically detects if your tags use a prefix and maintains consistency.</p>"},{"location":"user-guide/advanced-usage/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"user-guide/advanced-usage/#github-actions-example","title":"GitHub Actions Example","text":"<p>Here's a complete example of integrating GPTChangelog in a GitHub Actions workflow:</p> <pre><code>name: Generate Changelog\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  changelog:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install gptchangelog\n\n      - name: Get previous tag\n        id: previoustag\n        run: |\n          echo \"PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match \"v*\" HEAD^ || git rev-list --max-parents=0 HEAD)\" &gt;&gt; $GITHUB_ENV\n\n      - name: Generate changelog\n        env:\n          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n        run: |\n          gptchangelog generate --since ${{ env.PREVIOUS_TAG }} --to ${{ github.ref_name }} --output RELEASE_NOTES.md\n\n      - name: Create release\n        uses: softprops/action-gh-release@v1\n        with:\n          body_path: RELEASE_NOTES.md\n          files: |\n            *.tar.gz\n            *.zip\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n</code></pre>"},{"location":"user-guide/advanced-usage/#gitlab-ci-example","title":"GitLab CI Example","text":"<pre><code>generate_changelog:\n  stage: build\n  image: python:3.10\n  script:\n    - pip install gptchangelog\n    - PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match \"v*\" HEAD^ || git rev-list --max-parents=0 HEAD)\n    - gptchangelog generate --since $PREVIOUS_TAG --output RELEASE_NOTES.md\n  artifacts:\n    paths:\n      - RELEASE_NOTES.md\n  only:\n    - tags\n</code></pre>"},{"location":"user-guide/advanced-usage/#performance-optimization","title":"Performance Optimization","text":""},{"location":"user-guide/advanced-usage/#managing-token-usage","title":"Managing Token Usage","text":"<p>For large repositories with many commits, you may need to optimize token usage:</p> <pre><code># Set a lower token limit for cheaper processing\ngptchangelog generate --max-tokens 40000\n\n# Use a smaller model for faster processing\ngptchangelog generate --model gpt-3.5-turbo\n</code></pre> <p>You can also set these in your configuration:</p> <pre><code>[openai]\nmodel = gpt-3.5-turbo\nmax_context_tokens = 40000\n</code></pre>"},{"location":"user-guide/advanced-usage/#batch-processing","title":"Batch Processing","text":"<p>For very large projects, you can generate changelogs in smaller batches:</p> <pre><code># Generate changelog for the last 50 commits\ngptchangelog generate --since HEAD~50\n\n# Generate changelog between specific dates (using git revisions)\ngptchangelog generate --since $(git rev-list -n 1 --before=\"2023-01-01\" HEAD) --to $(git rev-list -n 1 --before=\"2023-02-01\" HEAD)\n</code></pre>"},{"location":"user-guide/advanced-usage/#advanced-output-control","title":"Advanced Output Control","text":""},{"location":"user-guide/advanced-usage/#multiple-output-formats","title":"Multiple Output Formats","text":"<p>You can redirect the output to process it further:</p> <pre><code># Generate changelog and save to a variable\nCHANGELOG=$(gptchangelog generate --dry-run)\n\n# Generate changelog in HTML format (using a converter)\ngptchangelog generate --dry-run | pandoc -f markdown -t html &gt; changelog.html\n</code></pre>"},{"location":"user-guide/advanced-usage/#custom-post-processing","title":"Custom Post-Processing","text":"<p>You can post-process the changelog with additional tools:</p> <pre><code># Generate changelog and add additional formatting\ngptchangelog generate --dry-run | sed 's/^## /## \ud83d\ude80 /' &gt; CHANGELOG.md\n\n# Generate changelog and extract specific sections\ngptchangelog generate --dry-run | grep -A 10 \"### Features\" &gt; FEATURES.md\n</code></pre>"},{"location":"user-guide/advanced-usage/#troubleshooting-advanced-usage","title":"Troubleshooting Advanced Usage","text":""},{"location":"user-guide/advanced-usage/#handling-large-repositories","title":"Handling Large Repositories","text":"<p>For very large repositories, you might encounter token limits. Solutions include:</p> <ol> <li>Generating changelogs for smaller time periods</li> <li>Using a more powerful model with higher token limits</li> <li>Filtering out non-essential commits before generation</li> </ol>"},{"location":"user-guide/advanced-usage/#debugging","title":"Debugging","text":"<p>For debugging issues:</p> <pre><code># Enable debug logging\nexport GPTCHANGELOG_DEBUG=1\ngptchangelog generate\n\n# Save raw API responses for inspection\nexport GPTCHANGELOG_SAVE_RESPONSES=1\ngptchangelog generate\n</code></pre> <p>This information can be useful when reporting issues or understanding how the tool processes your commits.</p>"},{"location":"user-guide/basic-usage/","title":"Basic Usage","text":"<p>This page covers the basic usage of GPTChangelog for generating changelogs from your git commits.</p>"},{"location":"user-guide/basic-usage/#command-line-interface","title":"Command Line Interface","text":"<p>GPTChangelog provides a command-line interface with several commands and options.</p>"},{"location":"user-guide/basic-usage/#main-commands","title":"Main Commands","text":"<ul> <li><code>gptchangelog generate</code>: Generate a changelog</li> <li><code>gptchangelog config</code>: Manage configuration</li> <li><code>gptchangelog config init</code>: Initialize configuration</li> <li><code>gptchangelog config show</code>: Show current configuration</li> <li><code>gptchangelog --version</code>: Show version information</li> <li><code>gptchangelog --help</code>: Show help information</li> </ul>"},{"location":"user-guide/basic-usage/#generating-a-changelog","title":"Generating a Changelog","text":"<p>The most common operation is generating a changelog from your git commit history.</p>"},{"location":"user-guide/basic-usage/#simple-usage","title":"Simple Usage","text":"<p>To generate a changelog from your latest tag to the current HEAD:</p> <pre><code>gptchangelog generate\n</code></pre> <p>This will:</p> <ol> <li>Find your latest git tag</li> <li>Fetch all commit messages since that tag</li> <li>Process them using OpenAI</li> <li>Determine the next version based on semantic versioning</li> <li>Generate a well-structured changelog</li> <li>Prepend it to your CHANGELOG.md file</li> </ol>"},{"location":"user-guide/basic-usage/#example-output","title":"Example Output","text":"<p>The generated changelog will look something like this:</p> <pre><code>## [1.2.0] - 2024-10-20\n\n### \u2728 Features\n- Add support for interactive editing mode\n- Implement automatic conventional commit detection\n\n### \ud83d\udc1b Bug Fixes\n- Resolve issue with version detection on Windows\n- Fix token counting logic for large repositories\n\n### \ud83d\udd04 Changes\n- Update default model to gpt-4o\n- Improve commit message grouping algorithm\n</code></pre>"},{"location":"user-guide/basic-usage/#common-options","title":"Common Options","text":"<p>Here are some common options for the <code>generate</code> command:</p>"},{"location":"user-guide/basic-usage/#custom-commit-range","title":"Custom Commit Range","text":"<p>You can specify a custom range of commits:</p> <pre><code>gptchangelog generate --since v1.0.0\n</code></pre> <p>Or between two specific references:</p> <pre><code>gptchangelog generate --since v1.0.0 --to v2.0.0-beta\n</code></pre>"},{"location":"user-guide/basic-usage/#custom-output-file","title":"Custom Output File","text":"<p>By default, the changelog is prepended to <code>CHANGELOG.md</code>, but you can specify a different file:</p> <pre><code>gptchangelog generate --output docs/CHANGES.md\n</code></pre>"},{"location":"user-guide/basic-usage/#current-version-override","title":"Current Version Override","text":"<p>You can override the automatically detected version:</p> <pre><code>gptchangelog generate --current-version 1.5.0\n</code></pre>"},{"location":"user-guide/basic-usage/#dry-run","title":"Dry Run","text":"<p>To preview the changelog without saving it:</p> <pre><code>gptchangelog generate --dry-run\n</code></pre>"},{"location":"user-guide/basic-usage/#exit-codes","title":"Exit Codes","text":"<p>GPTChangelog returns the following exit codes:</p> <ul> <li><code>0</code>: Success</li> <li><code>1</code>: Error (configuration error, git error, API error, etc.)</li> </ul> <p>You can use these exit codes in scripts to check if the command succeeded:</p> <pre><code>gptchangelog generate\nif [ $? -eq 0 ]; then\n  echo \"Changelog generated successfully\"\nelse\n  echo \"Error generating changelog\"\nfi\n</code></pre>"},{"location":"user-guide/basic-usage/#error-handling","title":"Error Handling","text":"<p>If GPTChangelog encounters an error, it will display an error message and exit with code 1. Common errors include:</p> <ul> <li>Configuration errors (missing API key)</li> <li>Git errors (not a git repository, no commits found)</li> <li>OpenAI API errors (authentication, rate limits)</li> <li>File I/O errors (permission denied, file not found)</li> </ul> <p>Check the error message for details on how to resolve the issue.</p>"},{"location":"user-guide/configuration/","title":"Configuration","text":"<p>GPTChangelog can be configured at both the global and project levels. This page explains all available configuration options and how to manage them.</p>"},{"location":"user-guide/configuration/#configuration-locations","title":"Configuration Locations","text":"<p>GPTChangelog looks for configuration in the following locations, in order of precedence:</p> <ol> <li>Project-specific configuration: <code>./.gptchangelog/config.ini</code></li> <li>Global configuration: <code>~/.config/gptchangelog/config.ini</code></li> </ol> <p>If a setting is defined in both places, the project-specific setting takes precedence.</p>"},{"location":"user-guide/configuration/#managing-configuration","title":"Managing Configuration","text":""},{"location":"user-guide/configuration/#initializing-configuration","title":"Initializing Configuration","text":"<p>To create a new configuration file:</p> <pre><code>gptchangelog config init\n</code></pre> <p>You'll be prompted to choose between global or project-specific configuration and enter your OpenAI API key and other settings.</p>"},{"location":"user-guide/configuration/#viewing-current-configuration","title":"Viewing Current Configuration","text":"<p>To see your current configuration:</p> <pre><code>gptchangelog config show\n</code></pre> <p>This will display both global and project-specific configurations if they exist.</p>"},{"location":"user-guide/configuration/#configuration-file-format","title":"Configuration File Format","text":"<p>The configuration file uses the INI format:</p> <pre><code>[openai]\napi_key = your-api-key-here\nmodel = gpt-4o\nmax_context_tokens = 80000\n</code></pre>"},{"location":"user-guide/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"user-guide/configuration/#openai-settings","title":"OpenAI Settings","text":"Option Description Default <code>api_key</code> Your OpenAI API key (Required) <code>model</code> The OpenAI model to use <code>gpt-4o</code> <code>max_context_tokens</code> Maximum tokens to use in each API call <code>80000</code>"},{"location":"user-guide/configuration/#environment-variables","title":"Environment Variables","text":"<p>You can also use environment variables to override configuration settings:</p> Variable Corresponding Config Option <code>OPENAI_API_KEY</code> <code>[openai] api_key</code> <code>GPTCHANGELOG_MODEL</code> <code>[openai] model</code> <code>GPTCHANGELOG_MAX_TOKENS</code> <code>[openai] max_context_tokens</code> <p>Environment variables take precedence over configuration file settings.</p>"},{"location":"user-guide/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"user-guide/configuration/#using-different-models","title":"Using Different Models","text":"<p>GPTChangelog works best with GPT-4 variants, but you can use other models:</p> <pre><code>[openai]\nmodel = gpt-3.5-turbo\n</code></pre> <p>Smaller models may produce less comprehensive results but use fewer tokens.</p>"},{"location":"user-guide/configuration/#token-management","title":"Token Management","text":"<p>The <code>max_context_tokens</code> setting controls how many tokens are used in each API call. If you have a large repository with many commits, you might need to adjust this:</p> <pre><code>[openai]\nmax_context_tokens = 120000\n</code></pre> <p>Keep in mind that larger values use more API tokens and may be more expensive.</p>"},{"location":"user-guide/configuration/#multiple-configurations","title":"Multiple Configurations","text":"<p>You can maintain different configurations for different projects:</p> <ol> <li>Set up a global configuration with default settings</li> <li>Create project-specific configurations for projects with special requirements</li> </ol>"},{"location":"user-guide/configuration/#example-configurations","title":"Example Configurations","text":""},{"location":"user-guide/configuration/#minimal-configuration","title":"Minimal Configuration","text":"<pre><code>[openai]\napi_key = your-api-key-here\n</code></pre>"},{"location":"user-guide/configuration/#full-configuration","title":"Full Configuration","text":"<pre><code>[openai]\napi_key = your-api-key-here\nmodel = gpt-4o\nmax_context_tokens = 80000\n</code></pre>"},{"location":"user-guide/configuration/#configuration-for-large-repositories","title":"Configuration for Large Repositories","text":"<pre><code>[openai]\napi_key = your-api-key-here\nmodel = gpt-4o\nmax_context_tokens = 120000\n</code></pre>"},{"location":"user-guide/configuration/#configuration-for-lower-cost","title":"Configuration for Lower Cost","text":"<pre><code>[openai]\napi_key = your-api-key-here\nmodel = gpt-3.5-turbo\nmax_context_tokens = 60000\n</code></pre>"},{"location":"user-guide/installation/","title":"Installation","text":"<p>This page provides detailed installation instructions for GPTChangelog.</p>"},{"location":"user-guide/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8 or higher</li> <li>Git (installed and in your PATH)</li> <li>OpenAI API key</li> </ul>"},{"location":"user-guide/installation/#installing-with-pip","title":"Installing with pip","text":"<p>The recommended way to install GPTChangelog is using pip:</p> <pre><code>pip install gptchangelog\n</code></pre> <p>This will install GPTChangelog and all its dependencies.</p>"},{"location":"user-guide/installation/#installing-from-source","title":"Installing from Source","text":"<p>If you prefer to install from source, you can clone the repository and install it:</p> <pre><code>git clone https://github.com/username/gptchangelog.git\ncd gptchangelog\npip install -e .\n</code></pre> <p>The <code>-e</code> flag installs the package in \"editable\" mode, which is useful if you plan to modify the source code.</p>"},{"location":"user-guide/installation/#dependencies","title":"Dependencies","text":"<p>GPTChangelog depends on the following packages:</p> <ul> <li><code>openai</code>: For interacting with OpenAI's API</li> <li><code>gitpython</code>: For accessing git repository information</li> <li><code>tiktoken</code>: For token counting and management</li> <li><code>rich</code>: For beautiful terminal output</li> <li><code>setuptools</code>: For packaging utilities</li> </ul> <p>These dependencies are automatically installed when you install GPTChangelog using pip.</p>"},{"location":"user-guide/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that GPTChangelog is installed correctly, run:</p> <pre><code>gptchangelog --version\n</code></pre> <p>This should display the version number of GPTChangelog.</p>"},{"location":"user-guide/installation/#setting-up-your-environment","title":"Setting Up Your Environment","text":""},{"location":"user-guide/installation/#openai-api-key","title":"OpenAI API Key","text":"<p>You'll need an OpenAI API key to use GPTChangelog. If you don't have one, you can get it from the OpenAI website.</p> <p>You can configure your API key in two ways:</p> <ol> <li> <p>Through the configuration file (recommended):    <pre><code>gptchangelog config init\n</code></pre></p> </li> <li> <p>Using an environment variable:    <pre><code>export OPENAI_API_KEY=your-api-key\n</code></pre></p> </li> </ol>"},{"location":"user-guide/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/installation/#common-installation-issues","title":"Common Installation Issues","text":"<p>Package not found</p> <p>If you get a \"command not found\" error after installation, make sure your Python scripts directory is in your PATH.</p> <p>Dependency conflicts</p> <p>If you encounter dependency conflicts, try installing in a virtual environment:</p> <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install gptchangelog\n</code></pre> <p>Git not found</p> <p>If you get an error about Git not being found, make sure Git is installed and in your PATH.</p>"},{"location":"user-guide/installation/#getting-help","title":"Getting Help","text":"<p>If you continue to experience issues, please:</p> <ol> <li>Check the GitHub issues to see if your problem has been reported</li> <li>Open a new issue if needed, providing details about your environment and the error messages</li> </ol>"},{"location":"user-guide/templates/","title":"Prompt Templates","text":"<p>GPTChangelog uses customizable prompt templates to guide the AI in generating high-quality changelogs. This page explains how these templates work and how you can customize them.</p>"},{"location":"user-guide/templates/#understanding-templates","title":"Understanding Templates","text":"<p>GPTChangelog uses three main prompt templates:</p> <ol> <li>Commits Template (<code>commits_prompt.txt</code>): Guides the processing and refinement of commit messages</li> <li>Version Template (<code>version_prompt.txt</code>): Determines the next version number based on semantic versioning</li> <li>Changelog Template (<code>changelog_prompt.txt</code>): Formats the final changelog output</li> </ol> <p>These templates use Python's <code>string.Template</code> format with <code>$variable</code> placeholders.</p>"},{"location":"user-guide/templates/#default-templates","title":"Default Templates","text":""},{"location":"user-guide/templates/#commits-template","title":"Commits Template","text":"<p>This template helps the AI understand and process raw commit messages:</p> <p><pre><code>Commit Messages:\n</code></pre> $commit_messages <pre><code>Objective:\n\nTo enhance a series of commit messages by merging redundant information and improving clarity.\n\nInstructions:\n1. Input Collection:\n    Gather all provided commit messages.\n    Ensure the messages are complete and accurate for processing.\n\n...\n</code></pre></p>"},{"location":"user-guide/templates/#version-template","title":"Version Template","text":"<p>This template determines the next version number based on semantic versioning:</p> <p><pre><code>Task: Increment Software Version Number Using Semantic Versioning\n\nCurrent Version: $latest_version (format: MAJOR.MINOR.PATCH)\n\nCommit Messages:\n</code></pre> $commit_messages <pre><code>Rules for Incrementing:\n    MAJOR Update: Increment for incompatible API changes.\n    MINOR Update: Increment for new, backwards-compatible functionality.\n    PATCH Update: Increment for backwards-compatible bug fixes.\n\n...\n</code></pre></p>"},{"location":"user-guide/templates/#changelog-template","title":"Changelog Template","text":"<p>This template formats the final changelog:</p> <p><pre><code>Changelog Generation for Software Project (Version: $next_version)\n\nDate: $current_date\n\nCommit Messages:\n</code></pre> $commit_messages <pre><code>Objective:\nCreate a structured, clear, and concise changelog in markdown format, reflecting the changes made in the latest software version.\n\nInstructions:\n1. Format the Changelog Header:\n    Use markdown's ## syntax to format the version header.\n    Follow the pattern: ## [$next_version] - $current_date.\n\n...\n</code></pre></p>"},{"location":"user-guide/templates/#customizing-templates","title":"Customizing Templates","text":"<p>You can customize these templates to fit your project's specific needs.</p>"},{"location":"user-guide/templates/#template-location","title":"Template Location","text":"<p>The default templates are located in the GPTChangelog package. To customize them, create your own copies in a project-specific location:</p> <pre><code>.gptchangelog/templates/\n\u251c\u2500\u2500 changelog_prompt.txt\n\u251c\u2500\u2500 commits_prompt.txt\n\u2514\u2500\u2500 version_prompt.txt\n</code></pre> <p>GPTChangelog will look for templates in this directory before falling back to the defaults.</p>"},{"location":"user-guide/templates/#available-variables","title":"Available Variables","text":"<p>Each template has access to specific variables:</p>"},{"location":"user-guide/templates/#commits-template_1","title":"Commits Template","text":"<ul> <li><code>$commit_messages</code>: The raw commit messages</li> <li><code>$project_name</code>: The name of your project</li> </ul>"},{"location":"user-guide/templates/#version-template_1","title":"Version Template","text":"<ul> <li><code>$commit_messages</code>: The processed commit messages</li> <li><code>$latest_version</code>: The current version number</li> <li><code>$project_name</code>: The name of your project</li> </ul>"},{"location":"user-guide/templates/#changelog-template_1","title":"Changelog Template","text":"<ul> <li><code>$commit_messages</code>: The processed commit messages</li> <li><code>$next_version</code>: The determined next version number</li> <li><code>$current_date</code>: The current date (YYYY-MM-DD)</li> <li><code>$project_name</code>: The name of your project</li> </ul>"},{"location":"user-guide/templates/#example-customization","title":"Example Customization","text":"<p>Here's an example of a customized changelog template:</p> <pre><code># $project_name Changelog\n\n## Release $next_version (Released on $current_date)\n\nThe following changes were included in this release:\n\n$commit_messages\n\n### Breaking Changes\n\nList any breaking changes here.\n\n### Known Issues\n\n- None at this time\n\n### Contributors\n\nThanks to all our contributors for this release!\n</code></pre>"},{"location":"user-guide/templates/#template-best-practices","title":"Template Best Practices","text":"<p>When customizing templates, consider the following best practices:</p> <ol> <li>Be Specific: Give clear instructions to the AI</li> <li>Structure Matters: Organize your template with clear sections</li> <li>Consistent Formatting: Maintain a consistent style guide</li> <li>Test Thoroughly: Test your templates with different types of commits</li> <li>Preserve Variables: Don't remove the essential variables needed for template rendering</li> </ol>"},{"location":"user-guide/templates/#advanced-template-techniques","title":"Advanced Template Techniques","text":""},{"location":"user-guide/templates/#custom-categorization","title":"Custom Categorization","text":"<p>You can customize how changes are categorized:</p> <pre><code>Categorize changes into these custom groups:\n- User-Facing: Changes visible to end users\n- Backend: Internal changes not visible to users\n- Performance: Optimizations and speed improvements\n- Security: Security fixes and enhancements\n- Documentation: Documentation and example updates\n</code></pre>"},{"location":"user-guide/templates/#project-specific-instructions","title":"Project-Specific Instructions","text":"<p>Add project-specific context:</p> <pre><code>This project is a Python CLI tool for data analysis.\nWhen describing changes, focus on:\n- Command usage changes\n- Data processing improvements\n- User experience enhancements\n</code></pre>"},{"location":"user-guide/templates/#custom-formatting","title":"Custom Formatting","text":"<p>Specify your preferred Markdown formatting:</p> <pre><code>Use the following format for the changelog:\n# Release $next_version\n\n**Release Date**: $current_date\n\n## What's New\n- Feature 1\n- Feature 2\n\n## Bug Fixes\n- Fix 1\n- Fix 2\n</code></pre>"},{"location":"user-guide/templates/#troubleshooting-templates","title":"Troubleshooting Templates","text":"<p>If you encounter issues with custom templates:</p> <ol> <li>Syntax Errors: Ensure your template uses the correct <code>$variable</code> syntax</li> <li>Missing Variables: Make sure all required variables are present</li> <li>Template Not Found: Verify the template file paths and names</li> <li>Unexpected Output: Check for formatting issues or conflicting instructions</li> </ol> <p>For debugging, you can run with the dry-run option to see the rendered output without saving:</p> <pre><code>gptchangelog generate --dry-run\n</code></pre>"}]}